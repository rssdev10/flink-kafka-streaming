apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'scala'

apply from: "dependencies.gradle"

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenLocal()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.18'
    compile 'org.apache.logging.log4j:log4j:' + ver.log4j

    compile "org.apache.flink:flink-java:${ver.flink}"
    compile "org.apache.flink:flink-streaming-java_${ver.scala}:${ver.flink}"
    compile "org.apache.flink:flink-connector-kafka-${major(ver.kafka8)}_${ver.scala}:${ver.flink}"
    compile "org.apache.flink:flink-streaming-connectors:${ver.flink}"

    compile "org.apache.kafka:kafka_${ver.scala}:${ver.kafka8}"

    compile "org.scala-lang:scala-library:" + ver.'scala-lib'
    runtime "org.scala-lang:scala-compiler:" + ver.'scala-lib'

    compile "com.google.code.gson:gson:$ver.gson"
}

def major(version) {
    return version.split('\\.').take(2).join('.')
}

task setup(type: JavaExec, dependsOn: [classes]) {
    args 'setup'

    // copy versions of packages
    ver.each {
        k,v -> environment[k] = v
    }

    main = 'Setup'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task test_data_prepare(type: JavaExec, dependsOn: classes) {
    args 'test_data_prepare'

    // copy versions of packages
    ver.each {
        k,v -> environment[k] = v
    }

    main = 'Setup'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task test_flink(type: JavaExec, dependsOn: classes) {
    main = 'FlinkStreamingConsumer'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task stop_all(type: JavaExec, dependsOn: classes) {
    args 'stop_all'

    // copy versions of packages
    ver.each {
        k,v -> environment[k] = v
    }

    main = 'Setup'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}


apply plugin: 'com.github.johnrengelman.shadow'

buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

shadowJar {
    manifest {
        attributes 'Main-Class': 'FlinkStreamingConsumer'
    }

    transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer) {
        resource = 'reference.conf'
    }
    destinationDir = new File("./bin/")
}
